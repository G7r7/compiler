int printNb(int n) { 
    if (n != 0) {
        int c;
        c = n % 10;
        n = n / 10;
        if (n != 0) {
            printNb(n);
        }
        putchar(c + 48);
    } else {
        putchar(48);
    }
}

int printChars(int array, int length) {
    int i;
    for (i = 0; i < length; i = i + 1)
    {
        putchar(array[i]);
    }
}

int init() {
    int heapMB, cellBytes, nbHeapCells, nbBlockCells, heapStart, heapEnd;
    heapStart = *0;
    heapMB = 1;
    cellBytes = 8;
    nbHeapCells = heapMB*1024*1024/cellBytes;
    nbBlockCells = nbHeapCells - 4;
    heapEnd = heapStart + nbHeapCells;
    *heapStart = heapStart + 1;

    int pFirstBlock, pBlockOccupied, pSize1, pNextBlock, pSize2;
    pFirstBlock = *heapStart;
    pBlockOccupied = *heapStart;
    pSize1 = pFirstBlock + 1;
    pNextBlock = pSize1 + 1;
    pSize2 = pNextBlock + nbBlockCells;

    *pBlockOccupied = 0;
    *pSize1 = nbBlockCells;
    *pNextBlock = -1;
    *pSize2 = nbBlockCells;
}

int free(int pointer) {

}

int malloc(int size) {
    int heapStart, pNextFreeBlock, pBlock, pBlockSize1;
    heapStart = *0;
    pNextFreeBlock = *heapStart;
    do {
        pBlock = pNextFreeBlock;
        pBlockSize1 = pBlock + 1;
        pNextFreeBlock = pBlock + 2;
    }
    while (*(pBlockSize1) < size && *(pNextFreeBlock) != -1);
    if (*(pBlockSize1) < size && *(pNextFreeBlock) == -1)
    {
        putchar(109);
        putchar(97);
        putchar(108);
        putchar(108);
        putchar(111);
        putchar(99);
        putchar(32);
        putchar(58);
        putchar(32);
        putchar(79);
        putchar(117);
        putchar(116);
        putchar(32);
        putchar(111);
        putchar(102);
        putchar(32);
        putchar(109);
        putchar(101);
        putchar(109);
        putchar(111);
        putchar(114);
        putchar(121);
        putchar(46);
        putchar(10);
    } else {
        return pBlock;
    }
}