int printNb(int n) { 
    if(n < 0){
        putchar(45);
        printNb((n * -1));
    }else if (n != 0) {
        int c;
        c = n % 10;
        n = n / 10;
        if (n != 0) {
            printNb(n);
        }
        putchar(c + 48);
    } else {
        putchar(48);
    }
}

int assert(int a, int b) {
    if(a == b) {
        putchar(79);
        putchar(75);
        return 1;
    } else {
        printNb(a);
        putchar(32);
        putchar(33);
        putchar(61);
        putchar(32);
        printNb(b);
        return 0;
    }
}

int printChars(int array, int length) {
    int i;
    for (i = 0; i < length; i = i + 1)
    {
        putchar(array[i]);
    }
}

int nullPtr() {
    return 0;
}

int bytesPerCell() {
    return 4;
}

int sizeOfIntInBytes() {
    return 4;
}

int nbCells(int size) {
    int nbMemCells;
    nbMemCells = size/bytesPerCell();
    if(size % bytesPerCell() != 0)
        nbMemCells = nbMemCells + 1;
    return nbMemCells;
}

int initFreeBlock(int size, int pBlock, int pNextBlock) {
    int pSize1, pSize2, nbDataCells, pBlockOccupied;
    nbDataCells = nbCells(size);
    pBlockOccupied = pBlock - 2;
    pSize1 = pBlock - 1;
    pSize2 = pBlock + nbDataCells;
    *pBlockOccupied = 0;
    *pSize1 = size;
    *pBlock = pNextBlock;
    *pSize2 = size;
    return pBlock;
}

int init() {
    int heapKB, pHeapStart;
    heapKB = 64;
    pHeapStart = *0;
    initFreeBlock(heapKB*1024 - 3, pHeapStart + 3, nullPtr());
    *pHeapStart = pHeapStart + 3;
}

int free(int pointer) {
    int size, pHeapStart, pNextFreeBlock;
    size = *(pointer - 1);
    pHeapStart = *0;
    pNextFreeBlock = *pHeapStart;
    *pHeapStart = initFreeBlock(size, pointer, pNextFreeBlock);
}

int malloc(int size) {
    int nbMemCells, pHeapStart, pBlockSize1, pBlock, pPreviousBlock, pNextBlock, pBlockSize2;
    nbMemCells = nbCells(size);
    pPreviousBlock = *0;
    pBlock = *pPreviousBlock;
    pBlockSize1 = pBlock - 1;
    pNextBlock = *pBlock;
    while (*pBlockSize1 < size && pNextBlock != nullPtr()) {
        pPreviousBlock = pBlock;
        pBlock = pNextBlock;
        pBlockSize1 = pBlock - 1;
        pNextBlock = *pBlock;
    }
    if (size > *pBlockSize1)
    {
        putchar(10);
        putchar(109);
        putchar(97);
        putchar(108);
        putchar(108);
        putchar(111);
        putchar(99);
        putchar(32);
        putchar(58);
        putchar(32);
        putchar(79);
        putchar(117);
        putchar(116);
        putchar(32);
        putchar(111);
        putchar(102);
        putchar(32);
        putchar(109);
        putchar(101);
        putchar(109);
        putchar(111);
        putchar(114);
        putchar(121);
        putchar(46);
        putchar(10);
    } else {
        int oldSize;
        oldSize = *(pBlockSize1);

        *(pBlock - 2) = 1;
        *(pBlock - 1) = size;
        *(pBlock + nbMemCells) = size;

        *(pPreviousBlock) = initFreeBlock(oldSize - size - 3, pBlock + nbMemCells + 3, pNextBlock);
        return pBlock;
    }
}